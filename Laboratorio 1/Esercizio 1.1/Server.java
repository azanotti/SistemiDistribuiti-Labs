import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;

public class Server {

	//Define the server connection properties
	private static int port = 8080;
	private static ServerSocket Server;
	
	//Define the server data structures
	private static String[] movies;
	private static String moviesOneLiner = "";
	
	//Define the constructor
	public Server() {
		//Open server on default port if it's not already binded
		try {
			Server = new ServerSocket(port);
			System.out.println("Server listening on port: " + Server.getLocalPort());
		} catch (IOException e) {
			System.out.println("Error while starting server on port " + port);
		}
	}
	
	//Define the loop for accepting and processing connections
	public static void serverAction() throws IOException {
		while(true) {
			PrintStream out = null;
			BufferedReader in = null;
			
			System.out.println("Waiting for client to establish a connection.");
			Socket client = Server.accept();
			
			System.out.println("Connection accepted from: "+ client.getInetAddress());
			
            out = new PrintStream(client.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(client.getInputStream()));

            try {
                String command = in.readLine();
                int day=new Integer(in.readLine());

                if(command.equals("1")){
                    if(day > 0 && day < 8){
                        System.out.println("Sending movies for day " + day + ": " + moviesOneLiner);

                        //Send the accept message
                        out.println(1);

                        //Send each row of movies
                        for(int i = 0; i < movies.length; i++) {
                            out.println(movies[i]);
                        }

                        //Send the end of transmission message
                        out.println("2-close");

                        //Flush the output stream
                        out.flush();

                        //Sleep
                        Thread.sleep(1000);
                    } 
                } else {
                    out.println(0);
                }
            } catch (Exception e) {
                System.out.println("Error while processing client request.");
                System.out.println(e.getMessage());
            }
		}
	}
	
	public static void main(String[] args) throws Exception {
		new Server();
		movies = new String[4];

		//Kindly generated by Github Copilot :)
		movies[0] = "The godfather";
		movies[1] = "The godfather 2";
		movies[2] = "The godfather 3";
		movies[3] = "The godfather 4";

		for(int i = 0; i < movies.length; i++) {
			moviesOneLiner = moviesOneLiner + movies[i] + ", ";
		}
		moviesOneLiner = moviesOneLiner.substring(0, moviesOneLiner.length() - 2);
				
		serverAction();
	}

}